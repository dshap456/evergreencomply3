import * as react_jsx_runtime from 'react/jsx-runtime';
import React$1, { ReactElement, FunctionComponent, Component } from 'react';
import { ErrorBoundaryProps, ErrorBoundaryPropsWithFallback } from 'react-error-boundary';

interface BaselimeRumConfig {
    apiKey: string;
    dataset: string;
    service: string;
    namespace: string;
    url: string;
    userId?: string;
    sessionId?: string;
    pageLoadId: string;
    enableLocal: boolean;
    enableWebVitals: boolean;
}
declare function useBaselimeRum(): {
    config: BaselimeRumConfig;
    setUser: (userId?: string) => void;
    captureException: (error: Error, info?: React$1.ErrorInfo) => Promise<void>;
    sendEvent: (message: string, data?: any) => void;
    _trackWebVital: (metric: any) => void;
};

/**
 * BaselimeErrorBoundary is a wrapper for ErrorBoundary that will send errors to Baselime.
 *
 */
declare function BaselimeErrorBoundary(props: ErrorBoundaryProps): react_jsx_runtime.JSX.Element;

interface BaselimeRumProps {
    apiKey: string;
    dataset?: string;
    service?: string;
    namespace?: string;
    url?: string;
    userId?: string;
    sessionId?: string;
    fallback?: ReactElement<unknown, string | FunctionComponent | typeof Component> | null;
    fallbackRender?: ErrorBoundaryPropsWithFallback["fallbackRender"];
    pageLoadId?: string;
    enableLocal?: boolean;
    enableWebVitals?: boolean;
    children: React.ReactNode;
}
declare function BaselimeRum(props: BaselimeRumProps): react_jsx_runtime.JSX.Element;

export { BaselimeErrorBoundary, BaselimeRum, BaselimeRumProps, useBaselimeRum };
